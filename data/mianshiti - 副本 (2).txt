　　

第1卷 ASP.NET

　　

第1章 类和结构的区别？

　　类是引用类型，结构是值类型
　　
　　类可以继承，也可以实现接口；结构不能继承，但可以实现接口
　　
　　类可以有显示的无参数构造函数；结构不能包含显示的无参数构造函数
　　
　　结构中不能有实例字段初始值设定；类没有任何限制
　　

第2章 访问修饰符

　　public 公有的任何位置都可以访问
　　
　　private 私有的只有类本身可以访问
　　
　　protected 受保护的只有类的自身和派生类可以访问
　　
　　internal 内部的同一个程序集的任何位置都能访问
　　
　　protected internal 内部受保护的同一个程序集或不同程序集的派生类可以访问
　　

第3章 面向对象的三大特征？

　　继承：子类继承父类
　　
　　封装：对外提供一个访问的接口，对内私有化
　　
　　多态：重写 Overriding，重载 Overloading
　　

第4章 抽象类和接口的区别？

   接口：interface

　 抽象类： abstract  声明方法的存在而不去实现它的类被叫做抽像类

　　
　　
　　相同点：都不能被实例化，都可以包含多个抽象成员
　　
　　不同点：抽象类可以包含已经实现的抽象方法，可以继承类，接口不能包含已经实现的抽象方法，无法继承类
　　

第5章 接口可以包含哪些成员？

　　方法，属性，事件，索引器

第6章 什么是装箱和拆箱？

　　装箱：将值类型转换成引用类型
　　
　　拆箱：将引用类型转换成值类型
　　

第7章 哪些类型是值，引用类型？

　　值类型：结构，枚举
　　
　　引用类型：类，接口，委托，数组，字符串
　　

第8章 值类型和引用类型的区别？

　　值类型的数据存储在线程栈上，变量本身存储数据
　　
　　引用类型的数据存储在托管堆上，变量存储引用地址
　　

第9章 重写和重载？

　　重写: Overrides 子类对父类中的虚成员或抽象成员进行重新实现
　　
　　重载：Overloading 同名方法，参数不同
　　

第10章 用户控件

　　后缀：.ascx
　　
　　特点：方便，可以根据需求自定义控件
　　

第11章 JQ选择器

　　样式选择器
　　
　　ID选择器
　　
　　层叠选择器
　　

第12章 向服务器发送请求方式？

　　get:向服务器请求数据
　　
　　post:向服务器提交数据
　　

第13章 const static readonly

　　const:常量声明的同时必须赋值，无法修改值
　　
　　static：静态的，表示在当前类是可以全局访问的
　　
　　readonly：只读声明时可以赋值也可以不赋值，值只能在构造函数中修改
　　

第14章 String StringBilider分别是什么意思？有什么区别

　　string: 字符串常量进行运算时会生成副本
　　
　　StringBilider 字符串变量进行运算时不会生成副本
　　

第15章 ADO.NET之中有哪些对象？

　　sqlConnection ：连接对象
　　
    sqlCommand：    命令对象
　　
　　sqlDataAdapter：适配器对象
　　
　　sqlDataReader： 读取器对象
　　
　　sqlParameter：	参数对象
　　
　　sqlTransaction：事务对象
　　
　　

第16章 Using关键字是什么意思？

　　导入或引用命名空间
　　
　　给类型取别名
　　
　　释放资源
　　

第17章 请描述is和as关键字分别是什么意思？

　　is:检查对象是否与给定的类型是否相兼容
　　
　　as: 用于对引用类型的变量进行转换
　　

第18章 Asp.NET之中页面传值方式有哪些？

　　QuerString 
　　
　　优点：简单便捷
　　
　　缺点：安全性差，长度大小有限制

　　
　　
　　Session 服务器传值
　　
　　优点：当前所有会话的所有页面可以使用，能够传递任何对象
　　
　　缺点：可能会丢失
　　
　　解决办法：存储在进程或数据库中

　　
　　
　　Cookie 客户端传值
　　
　　优点：读取该Cookie的所有页面都可以使用
　　
　　缺点：只能存储文本信息，大小不能超过4KB

　　
　　
　　Application 
　　
　　优点：整个应用程序都可以使用，能够传递任何对象
　　
　　缺点：可能会产生并发问题

　　
　　
　　Server.Transfer 
　　
　　优点：URL不会重定向
　　
　　缺点：资源消耗较大
　　

第19章 ref 和 out 区别

　　ref 在传入方法之前必须赋值,可以直接在方法内部调用
　　
　　out 在方法返回之前必须赋值，不能直接在方法调用
　　

第20章 string=null 的区别

　　string="" 为字符分配了内存空间
　　
　　string=null 没有分配内存空间
　　

第21章 new 的用法

　　用于创建对象和调用构造函数

    用于创建匿名类型的实例

    可以显示隐藏从父类继承的成员

第22章 & 和 &&的区别

　　& 按位与表示对两个整型进行按位与计算
　　
　　&& 逻辑与对两个布尔类型进行逻辑与操作，两边都为true时返回true
　　
　　| 按位或表示对两个整型进行按位或计算
　　
　　|| 逻辑或对两个布尔类型进行逻辑与操作，其中一边为true时返回true
　　

第23章 什么是 GC ？ 为什么用到GC？

　　GC：垃圾收集器

    垃圾收集器是一种自动进行内存管理的机制，使得程序员不需要手动去分配内存和释放内存
    提高了程序的安全性，稳定性，及开发效率

第24章 什么是委托？事件和委托的关系？

　　委托：delegate 将函数当作参数传入另一个函数中

    event事件关键字 事件也是一种委托

第25章 ADO.NET中访问数据库的基本步骤是什么？

　　创建数据库连接对象：sqlconnection con=new sqlconnection("server=.;database=Attendance;uid=sa;pwd=sa;");

    打开连接:con.Open(); string sql="insert into UserInfo(U_ID,U_Name) values('1000','admin')";

    创建命令对象：sqlcommand cmd=new sqlcommand (sql,con);

    执行sql语句：return rows=cmd.ExecuteNonQuery()>0；

    关闭连接：con.Close();

第26章 身份验证

　　Windows 验证ASP.NET 结合IIS 验证用户
　　
　　Froms 验证Cookie验证
　　
　　Passport 验证微软提供的验证
　　

第27章 Server.Transfer 与 Response.Redirect 有什么区别？

　　Server.Transfer 服务器端重定向，URL不变
　　
　　Response.Redirect 客户端重定向，重定向URL
　　

第28章 Code-Behind技术

　　代码隐藏技术

第29章 ASP.NET 中调用 Web Service的方法有哪些？

　　通过HTTP-GET请求调用
　　
　　通过HTTP-POST请求调用
　　
　　通过SOAP请求调用
　　

第30章 ？和？？

　　？？：三元运算符 返回符合条件的值
    
    ？：合并运算符 左边不为NULL 时 返回 左边的值，反之返回右边的值

第31章 DateSet 和 DateReader的区别？

　　DateSet ：  数据表集合，一次性读取数据库

    DateReader：数据读取器 ，逐行读取数据

第32章 无状态编程

　　客户端向服务端发送请求，服务端不会主动记录任何请求信息，请求结束后释放资源，这种请求和响应的过程称为无状态编程
　　

第33章 Web Service有哪些优点？

　　Web Service是基于XML的，与具体语言和平台无关，故可以实现跨平台，跨语言通信
    
    Web Service 是采用SOAP 协议进行通信的，该协议基于HTTP协议，故可以实现跨防火墙通信
    
    Web Service 可以很容易实现分布式的应用程序

第34章 ASP.NET 缓存有几种实现方式？

　　OutputCache: 页面输出缓存，将页面全部进行缓存
　　
　　Register: 页面局部缓存，缓存用户控件
　　
　　数据缓存：Cache 使用Cache类缓存
　　
　　客户端缓存：使用HttpCachePolicy 类进行客户端缓存
　　

第35章 ViewState

　　ViewState：视图状态，当前页面传值
　　

第36章 ASP.NET中的六大对象有哪些？

　　aspx:页面
　　
　　ascx:用户控件
　　
　　asmx：Web Service
　　
　　ashx: 一般处理程序
　　
　　asax: Global.asax 全局应用程序配置
　　

第37章 实现Ajax 请求的常用方法有哪些？ 有什么区别？

　　$.get 通过get 方式发送请求
　　
　　$.post 通过post 方式发送请求
　　
　　$.ajax 可以使用指定的方式发送请求
　　
　　

第38章 MVC的含义及作用

　　M: Model,模型，用于数据的访问

　　V：View,视图，用于呈现页面

　　C：Controller，控制器，用于处理请求逻辑，访问默写数据

　　

　　好处：各施其职，互不干涉，有利于开发中的分工，有利于组件的重用

第39章 MVC请求的处理过程

　　客户端发送请求，请求到达服务器后，进入路由器验证，验证通过后，将请求交给控制器中的动作处理，在动作中可能会访问模型中的数据，处理相应的业务逻辑，然后根据请求的内容返回相应的视图呈现给客户端

第40章 什么叫应用程序域？

　　应用程序域可以理解为一种轻量级进程。起到安全的作用。占用资源小

第41章 CTS、CLS、CLR分别作何解释？

　　CTS：通用语言系统。CLS：通用语言规范。CLR：公共语言运行库。

第42章 什么是受管制的代码？

　　unsafe：非托管代码。不经过CLR运行。

第43章 什么是强类型系统？

　　RTTI：类型识别系统。

第44章 在.net中，配件的意思是？

　　程序集。（中间语言，源数据，资源，装配清单）

第45章 .net Remoting 的工作原理是什么？

　　服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置

第46章 简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用

　　WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。
　　
　　remoting是.net 中用来跨越machine, process, appdomain 进行方法调用的技术,对于三成结构的程序，就可以使用remoting技术来构建．它是分布应用的基础技术.相当于以前的DCOM Web Service是一种构建应用程序的普通模型，并能在所有支持internet网通讯的操作系统上实施。Web Service令基于组件的开发和web的结合达到最佳，基于组件的对象模型
　　

第47章 foreach遍历访问的对象需要实现

　　能用foreach遍历访问的对象需要实现 IEnumerable 接口或声明 GetEnumerator 方法的类型

第48章 进程和线程的区别？

　　进程是系统进行资源分配和调度的单位；线程是CPU调度和分派的单位，一个进程可以有多个线程，这些线程共享这个进程的资源

第49章 堆和栈的区别？

栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小有明确的定义；堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小　　

第50章 软件开发过程一般有几个阶段？每个阶段的作用？

　　需求分析，架构设计，代码编写，QA，部署

第51章 什么叫做SQL注入，如何防止？请举例说明

　　利用sql语言漏洞获得合法身份登陆系统

　　解决办法：1.PreparedStatement

　　	   2.使用正则表达式过滤传入的参数

　　	   3.字符串过滤

　　	   4.jsp中调用该函数检查是否包函非法字符

　　         

第52章 什么是虚函数？什么是抽像函数？

　　虚函数：可由子类继承并重写的函数。抽像函数：规定其非虚子类必须实现的函数，必须被重写。

第53章 什么是XML？

　　XML即可扩展标记语言

第54章 XML 与 HTML 的主要区别

　　1. XML是区分大小写字母的，HTML不区分。
　　
　　2. 在HTML中，如果上下文清楚地显示出段落或者列表键在何处结尾，那么你可以省略</p>或者</li>之类的结束标记。在XML中，绝对不能省略掉结束标记。
　　
　　3. 在XML中，拥有单个标记而没有匹配的结束标记的元素必须用一个/ 字符作为结尾。这样分析器就知道不用查找结束标记了。
　　
　　4. 在XML中，属性值必须分装在引号中。在HTML中，引号是可用可不用的。
　　
　　5. 在HTML中，可以拥有不带值的属性名。在XML中，所有的属性都必须带有相应的值。
　　

第55章 如何处理几十万条并发数据

　　用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方式这种方法并发的时候是不会有重复主键的..取得最大标识要有一个存储过程来获取.

第56章 成员变量和成员函数前加static的作用？

　　它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数。分别用来反映类的状态。比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作

第57章 谈谈final, finally, finalize的区别

　　final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载
　　
　　finally—再异常处理时提供finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的catch 子句就会执行，然后控制就会进入finally 块（如果有的话）。
　　
　　finalize—方法名。Java 技术允许使用finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在Object 类中定义的，因此所有的类都继承了它。子类覆盖finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的
　　

第58章 sleep() 和 wait()

　　sleep()方法是使线程停止一段时间的方法
　　
　　wait()是线程交互时，如果线程对一个同步对象x 发出一个wait()调用，该线程会暂停执行，被调对象进入等待状态，直到被唤醒或等待时间到
　　

第59章 Set里的元素是不能重复的

　　Set里的元素是不能重复的，那么用iterator()方法来区分重复与否。equals()是判读两个Set是否相等。
　　
　　equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值
　　

第60章 swtich

　　switch（expr1）中，expr1是一个整数表达式。因此传递给switch 和case 语句的参数应该是int、short、char 或者byte。long,string 都不能作用于swtich
　　

第61章 构造器Constructor

　　构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading。

第62章 启动一个线程

　　启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程
　　
　　

第2卷 SQL Server

　　

第1章 Row_Number 排序

　　Row_Number 排序

第2章 case_when  表示判断

　　case_when  表示判断

第3章 取出表中第31到40条记录

　　方法一： select top 10 * from A where id not in (select top 330 id from A order by id) order by id

　　方法二：select top 10 * from A where id>(select max(id) from (select top 30 id from A order by id) t)

　　方法三：select * from (select * row_number() over (order by id) Row_No from A) t where Row_No between 31 and 40

第4章 SQL中三种表连接的方式

　　inner join : 内联查询，查询出满足on条件的两个表的公共交集

　　left join： 左外联查询，以左边的表为基准与右边的进行关联，连接查询出满足on条件的结果，左表数据完全保留，右边无法满足条件的数据用null与左表数据补齐

　　right join ：右外联查询，以右边的表为基准与左边的进行关联，连接查询出满足on条件的结果，右表数据完全保留，左边无法满足条件的数据用null与右表数据补齐

第5章 存储过程和函数的区别

　　函数可以嵌入在 sql语句中使用，存储过程需要通过exec调用

　　函数限制较多，存储过程限制相对较少

　　存储过程用于实现复杂的业务逻辑，函数实现功能针对性较强的业务

　　存储过程可以返回多个输出参数或结果集，函数只能返回一个输出参数或结果表对象

第6章 数据库索引是什么？有什么用？

　　索引：是数据库表中一列或多列的值进行排序的一种结构

　　作用：用于加快从表中查询数据的速度

第7章 数据库索引的分类及区别？

　　聚集索引：表示索引的逻辑顺序与磁盘上行的物理存储顺序相同

　　非聚集索引：表示索引的逻辑顺序与磁盘上行的物理存储顺序不同

第8章 什么是事务？有哪些特性？

　　事务：作为单个逻辑工作单元执行的一系列操作

　　特性：原子性（Atomicity） 不可再分，要么完全地执行，要么完全地不执行

　　	一致性（Consistency）：事务从开始到结束，所有数据都保持一直状态

　　      隔离性（Isolation）：事务的执行时互不干扰的

　　      持久性（Durability）:事务完成后，对数据库所做的更改会持久的保存在数据库中，不会被回滚

第9章 事务的好处

　　可以保证数据的完整性和一致性

第10章 触发器

　　DML 触发器：在数据变更时触发

　　
    DML 触发器又分为：

　　		  after触发器（之后触发）：在触发 insert、update 或是delect 动作之后执行，只能定义在表上

　　		  instead of 触发器（之前触发）：触发器代替触发动作进行激发，并在处理约束之前激发

　　DDL 触发器：在修改数据库级别或实例级别对象时触发
　　

第11章 delete和truncate的区别？

　　delete 可以带 where 条件 ，用于删除指定条件的数据，truncate 和 table 组合使用，truncate不能带 where条件

　　truncate 在删除 表中全部数据时会重置自动增长列，delete 不会

第12章 union 和 union all 的区别？

　　union 和 union all 都可以用作两张表数据的合并

　　union :在合并的同时去除重复的数据

　　
    union all：直接合并，不做处理
　　

第13章 查询成绩在前三的学生

　　select * from （select * dense_rank() over (order by 学生成绩 desc) NO  from 学生成绩表） t where NO<=3

　　select * from （select * rank() over (order by 学生成绩 desc) NO  from 学生成绩表） t where NO<=3

　　select * from （select * row_number() over (order by 学生成绩 desc) NO  from 学生成绩表） t where NO<=3

第14章 如何得到自增长自段的当前值？

　　select @@identity

第15章 游标的作用？如何知道游标到了最后？

　　作用：逐行读取结果集中的数据

　　当全局变量 @@fetch_status的值不等于0时，表示游标已经到了最后

第16章 什么是内存泄漏？

　　内存泄漏指的是堆内存的泄漏

第17章 什么叫视图？

　　视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。

第18章 维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？

　　我是这样做的，尽可能使用约束，如check,主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保证数据的完整新和一致性。最后考虑的是自写业务逻辑，但这样做麻烦，编程复杂，效率低下

第3卷 算法

　　

第1章 递归计算1+2+。。+100

　class Profram
  {
　　  static void Main(string[] args)
      {
	int total=Sum(100);
	Console.WriteLine(total);
　　  }

　　  static int Sum(int x)
      {
	if(x <=1）
          {
	    return x;
　　	}
	else
	{
	   return x+Sum(x-1);
　　	}
　　  }

　}

第2章 冒泡排序(从大到小)

　　public static void Sort(int[] nums)
    {
	int temp;
	for(int i=0;i< nums.Length-1;i++)
	{
	     for(int j=i+1;j<nums.Lenght;j++)
	     {
		if(nusm[j] < nums[i])
		{
		     temp=nums[i];
		     nums[i]=nums[j];
		     nums[j]=temp;
　　		}
　　	     }
　　	}
　　}

第3章 统计每一种字符的出现次数

　　public static void CountChar(string s)
    {
	Dictionary<char,int> dic=new Dictionary<char,int>();

	foreach (char c in s)
	{
	      if(dic.ContainsKey(c))
	      {
		dic[c]++;
　　	      }
	      else
	      {
		dic.Add(c,1);
　　	      }
　　	}

　　	foreach(KeyValuePair<char,int> p in dic)
	{
	     Console.WriteLine("字符：{0}，出现次数：{1}",p.Key.ToString(),p.Value.ToString());
　　	}
　　}

第4章 字符串转换成整数

public static bool TryParse(String s,out int num)
{
     if(string.IsNullOrEmpty(s))
     {
	num=0;
	return false;
　　 }

　　 int result=0;
     bool minus=s[0]=='-'?true:false;
     if(minus && s.Lenght ==1 )
     {
	num=0;
	return false;
　　 }

　　 for (int i=minus?1:0;i < s.Lenght;i++)
     {
	if(s[i] >= '0' && s[i] <= '9')
    	{
		result=(s[i]-48)+result * 10;
　　	}
	else
	{
		num=0;
		return false;
　　	}
　　 }

　　 num=minus ? -result:result;
     return true;
}　　

第5章 斐波数列

　　public class MainClass 
    { 
        public static void Main()   
        { 
            Console.WriteLine(Foo(30)); 
        } 
        public static int Foo(int i) 
        { 
            if (i <= 0) 
                return 0; 
            else if(i > 0 && i <= 2) 
                return 1; 
            else return Foo(i -1) + Foo(i - 2); 
        } 
    } 

第6章 产生一个int数组，长度为100，并向其中随机插入1-100，并且不能重复

　　int[] intArr=new int[100];
　　
　　ArrayList myList=new ArrayList();
　　
　　Random rnd=new Random();
　　
　　while(myList.Count<100)
　　
　　{
　　
　　int num=rnd.Next(1,101);
　　
　　if(!myList.Contains(num))
　　
　　myList.Add(num);
　　
　　}
　　
　　for(int i=0;i<100;i++)
　　
　　intArr[i]=(int)myList[i]; 
　　

第4卷 代码

　　

第1章 复选框 全选 反选

function selectAll(){
　
	var checked=$("#chkAll").get(0).checked;

　　	$(":checkbox:not(#chkAll)").each(function(){

		this.checked=checked;
　　})
　　}　　

第2章 表格隔行变色

$(document).ready(function(){

	$("#table tr:even").css("background-color","Orange");

　　	$("#table tr:odd").css("background-color","Pink");
})　　

第3章 表格中鼠标移动的光棒效果

　　$(document).ready(function(){
	
	$("#table tr").hover(function(){
		$(this).css("background-color","#aaee22");
　　},function(){
	$(this).css("background-color","#ffffff");
　　});
　})

第4章 请编程遍历页面上所有TextBox控件并给它赋值为string.Empty

　　 foreach (System.Windows.Forms.Control control in this.Controls)
     {
	if (control is System.Windows.Forms.TextBox)
	{
    	       System.Windows.Forms.TextBox tb = (System.Windows.Forms.TextBox)control ;
    	       tb.Text = String.Empty ;
	}
     }
